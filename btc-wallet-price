#!/usr/bin/ruby
# TODO: -w

# Usage: btc-wallet-price [--xosd]

ENV['BUNDLE_GEMFILE'] = File.dirname(__FILE__) + "/Gemfile"

require 'rubygems'
require 'bundler/setup'

require 'net/http'
require 'json'

require_relative 'config'

module BtcKit
	class BtcWalletPrice
		def initialize
			@config = Config.new
		end

		def current_value
			@config.wallet_btc * btc_localbitcoins_manual
		end

		def btc_localbitcoins_manual
			response = Net::HTTP::get_response(URI.parse "https://localbitcoins.com/bitcoincharts/CZK/trades.json").body
			json = JSON.parse(response)

			last_10 = json.reverse.take(10).map { |trade| trade["price"].to_f }
			last_10.inject(&:+) / last_10.size
		end

		def btc_avg_localbitcoins
			response = Net::HTTP::get_response(URI.parse "https://localbitcoins.com/bitcoinaverage/ticker-all-currencies/").body
			json = JSON.parse(response)

			raise "Response doesn't contain CZK: #{response}" unless json["CZK"]
			ticker = json["CZK"]
			avg = ticker["avg_3h"] || ticker["avg_12h"] || ticker["avg_24h"] or raise "Cannot get average price (ticker: #{ticker.inspect})"

			avg.to_f
		end

		# BitCash API (dropped)
		def btc_price_bitcash
			json = JSON.parse(Net::HTTP.get_response(URI.parse "http://bitcash.cz/market/api/BTCCZK/ticker.json").body)
			raise unless json["result"] == "success"
			json["data"]["sell"]["value"].to_f
		end
		
		def main
			raw = false
			xosd = false

			until ARGV.empty?
				case ARGV.shift
				when "--xosd" then xosd = true
				when "--raw" then raw = true
				else puts "Usage: btc-wallet-price [--xosd] [--raw]"; exit 1
				end
			end

			currentCZK = current_value
			initialCZK = @config.initial_czk
			delta = currentCZK - initialCZK
			deltaPercent = (delta / initialCZK) * 100.0

			result = if raw
				"%.2f" % currentCZK
			else
				"%.2f Kč (%+.2f Kč, %+.2f%%)" % [currentCZK, delta, deltaPercent]
			end

			if xosd
				system "xosdutilctl", "echo", result
			else
				puts result
			end
		end
	end
end

if __FILE__ == $0
	BtcKit::BtcWalletPrice.new.main
end
